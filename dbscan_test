{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fine-Scale Prediction of People's Home Location using Social Media Footprints\n",
    "\n",
    "_**Authors:** Hamdi Kavak, Daniele Vernon-Bido, and Jose Padilla_\n",
    "\n",
    "_**Submitted:** SBP-BRIMS 2018 on January 11, 2018._\n",
    "\n",
    "## DBSCAN Clustering Distance Resolution Test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### Home Location Prediction Paper ###########\n",
    "# Task: Home location DBSCAN resolution test\n",
    "# Author: Hamdi Kavak\n",
    "# Created: December 27, 2017\n",
    "#########################################\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import DBSCAN\n",
    "from geopy.distance import great_circle\n",
    "from datetime import timedelta\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - CONSTANTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "METER_PER_RADIAN = 6371000.0088\n",
    "DISTANCE_RESOLUTION_IN_METER = 100\n",
    "TIME_RESOLUTION_IN_MINUTES = 60"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def clean_location_footprints(data):\n",
    "    # making sure there is enough data\n",
    "    if len(data) < 2:\n",
    "        return data\n",
    "\n",
    "    # the remaining lines below looks consecutive tweets to make sure \n",
    "    #       they are not sent from the same place within a short timeframe'\n",
    "    #       because it will introduce biases in the machine learning model.\n",
    "    \n",
    "    user_index_values = data.index.values\n",
    "    indexes_to_drop = []\n",
    "    first_item = data.iloc[0,:]\n",
    "\n",
    "    for i in range(1,len(data)-1):\n",
    "\n",
    "        second_item = data.iloc[i,:]\n",
    "\n",
    "        time_diff = second_item['local_datetime']-first_item['local_datetime']\n",
    "        time_diff_in_minutes = time_diff / np.timedelta64(1, 'm')\n",
    "\n",
    "        first_point = (first_item['latitude'], first_item['longitude'])\n",
    "        second_point = (second_item['latitude'], second_item['longitude'])\n",
    "\n",
    "        distance_in_meters = great_circle(first_point, second_point).meters\n",
    "\n",
    "        if time_diff_in_minutes < TIME_RESOLUTION_IN_MINUTES and second_item['home_confirmed'] == 'f' and distance_in_meters < DISTANCE_RESOLUTION_IN_METER:\n",
    "            indexes_to_drop.append (i)\n",
    "        else:\n",
    "            first_item = second_item\n",
    "\n",
    "    data = data.drop(data.index[indexes_to_drop])\n",
    "    \n",
    "    return data\n",
    "\n",
    "# original https://stackoverflow.com/a/1518632/80738\n",
    "def get_most_common(lst):\n",
    "    return max(set(lst), key=lst.count)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1222971  rows loaded.\n"
     ]
    }
   ],
   "source": [
    "## all_data.csv contains anonymized ~1.2 million tweets from 1268 users\n",
    "parse_dates = ['utc_datetime', 'local_datetime']\n",
    "df = pd.read_csv('all_data.csv',low_memory=False, parse_dates=parse_dates)\n",
    "\n",
    "df.sort_values('id',inplace=True)\n",
    "\n",
    "## We use only one users' data to generate machine learning model attributes\n",
    "##   after getting this done, other users will be quite straigtforward.\n",
    "\n",
    "num_of_rows = len(df.index)\n",
    "print num_of_rows, ' rows loaded.'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - Iterate through users and record the distance among home-labeled clusters and to the centroid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of among-cluster check-in distances:  1065523\n",
      "Number of centroid-based check-in distances 238288\n"
     ]
    }
   ],
   "source": [
    "# record all distances\n",
    "distances_among_checkins = []\n",
    "distances_to_centroid = []\n",
    "distances_among_checkins_avg = []\n",
    "distances_to_centroid_avg = []\n",
    "\n",
    "unique_user_ids = df.user_id.unique()\n",
    "\n",
    "for selected_user_id in unique_user_ids:\n",
    "    \n",
    "    # get only data from this user\n",
    "    df_user = df.loc[df['user_id'] == selected_user_id] \n",
    "    \n",
    "    # clean data for repeated entries\n",
    "    df_user = clean_location_footprints(df_user) \n",
    "    \n",
    "    # apply clustering algorithm to enhance data further\n",
    "    coords = df_user.as_matrix(columns=['latitude', 'longitude'])\n",
    "    epsilon = DISTANCE_RESOLUTION_IN_METER / METER_PER_RADIAN\n",
    "    db = DBSCAN(eps=epsilon, min_samples=1, algorithm='ball_tree', metric='haversine').fit(np.radians(coords))\n",
    "    cluster_labels = db.labels_\n",
    "    \n",
    "    # add cluster IDs as a property called 'label'\n",
    "    df_user = df_user.assign(label=pd.Series(cluster_labels).values)\n",
    "    \n",
    "    # mark check-ins that is confirmed as home\n",
    "    home_confirmed_checkins = df_user.loc[df_user['home_confirmed'] == 't']\n",
    "    \n",
    "    # there is a possibility that home checkins will be assigned to multiple clusters\n",
    "    # we chose the most commonly seen one\n",
    "    home_label = get_most_common(home_confirmed_checkins['label'].tolist())\n",
    "    \n",
    "    # find all home checkins\n",
    "    all_home_checkins = df_user.loc[df_user['label'] == home_label]\n",
    "    home_cluster_centroid = (all_home_checkins['latitude'].mean(), all_home_checkins['longitude'].mean())\n",
    "    \n",
    "    \n",
    "    # get a sample with up to 50 home location checkins\n",
    "    sample_size = 50\n",
    "    data_size = len(all_home_checkins.index)\n",
    "    \n",
    "    if data_size > 1:\n",
    "    \n",
    "        sample_home_checkins = all_home_checkins.sample(sample_size) if data_size > sample_size else all_home_checkins\n",
    "\n",
    "        distances_among_checkins_temp = []\n",
    "        distances_to_centroid_temp = []\n",
    "        # calculate the distance among home checkins\n",
    "        # j and j index is used to eliminate unnecessary repetitions\n",
    "        i = 0\n",
    "        for ind1, row1 in sample_home_checkins.iterrows(): \n",
    "\n",
    "            first_point = (row1['latitude'], row1['longitude'])\n",
    "            j = 0\n",
    "\n",
    "            for ind2, row2 in sample_home_checkins.iterrows():\n",
    "                if j > i:\n",
    "\n",
    "                    second_point = (row2['latitude'], row2['longitude'])\n",
    "\n",
    "                    distance_in_meters = great_circle(first_point, second_point).meters\n",
    "                    distances_among_checkins.append(distance_in_meters)\n",
    "                    distances_among_checkins_temp.append(distance_in_meters)\n",
    "                j = j + 1\n",
    "\n",
    "            i = i + 1\n",
    "\n",
    "\n",
    "        for ind, row in all_home_checkins.iterrows(): \n",
    "            # calculate the distance against the centroid\n",
    "            first_point = (row['latitude'], row['longitude'])\n",
    "            distance_in_meters = great_circle(first_point, home_cluster_centroid).meters\n",
    "            distances_to_centroid.append(distance_in_meters)\n",
    "            distances_to_centroid_temp.append(distance_in_meters)\n",
    "\n",
    "        distances_among_checkins_avg.append(np.mean(distances_among_checkins_temp))\n",
    "        distances_to_centroid_avg.append(np.mean(distances_to_centroid_temp))\n",
    "    \n",
    "\n",
    "print 'Number of among-cluster check-in distances: ', len(distances_among_checkins)\n",
    "print 'Number of centroid-based check-in distances', len (distances_to_centroid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### - Distances among check-ins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean:  44.9466059511  - Median :  15.3627336417  - Std. dev.:  105.551205751\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10d5b81d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print 'Mean: ', np.mean(distances_among_checkins), ' - Median : ', np.median(distances_among_checkins), ' - Std. dev.: ', np.std(distances_among_checkins)\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.hist(distances_among_checkins, bins=50, normed=True)\n",
    "plt.title('Distances among checkings - DBSCAN max distance: ' + str(DISTANCE_RESOLUTION_IN_METER) + ' meters')\n",
    "plt.xlabel('Distance (meter)')\n",
    "plt.ylabel('Ratio of instances')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### - Distances between check-ins and cluster centroid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean:  50.9353743751  - Median :  15.4253554779  - Std. dev.:  105.055535234\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1124b3e90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print 'Mean: ', np.mean(distances_to_centroid), ' - Median : ', np.median(distances_to_centroid), ' - Std. dev.: ', np.std(distances_to_centroid)\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.hist(distances_to_centroid, bins=50, normed=True)\n",
    "plt.title('Distances to centroid - DBSCAN max distance:' + str(DISTANCE_RESOLUTION_IN_METER) + ' meters')\n",
    "plt.xlabel('Distance (meter)')\n",
    "plt.ylabel('Ratio of instances')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - ... same test w/ averages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean:  40.0130467879  - Median :  20.8643033369  - Std. dev.:  65.2363184551\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10d362cd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean:  28.8697522322  - Median :  14.4787045072  - Std. dev.:  48.3737235329\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10d393d50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print 'Mean: ', np.mean(distances_among_checkins_avg), ' - Median : ', np.median(distances_among_checkins_avg), ' - Std. dev.: ', np.std(distances_among_checkins_avg)\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.hist(distances_among_checkins_avg, bins=20, normed=True)\n",
    "plt.title('Distances among checkings (avg.) - DBSCAN max distance:' + str(DISTANCE_RESOLUTION_IN_METER) + ' meters')\n",
    "plt.xlabel('Distance (meter)')\n",
    "plt.ylabel('Ratio of instances')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "print 'Mean: ', np.mean(distances_to_centroid_avg), ' - Median : ', np.median(distances_to_centroid_avg), ' - Std. dev.: ', np.std(distances_to_centroid_avg)\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.hist(distances_to_centroid_avg, bins=20, normed=True)\n",
    "plt.title('Distances to centroid (avg.) - DBSCAN max distance:' + str(DISTANCE_RESOLUTION_IN_METER) + ' meters')\n",
    "plt.xlabel('Distance (meter)')\n",
    "plt.ylabel('Ratio of instances')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
